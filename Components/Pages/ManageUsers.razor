@page "/manage-users"
@using Laws_Brody_Lab_5.Services;
@using Laws_Brody_Lab_5.Components;
@using Laws_Brody_Lab_5.Models;
@inject NavigationManager Nav
@inject ILibraryService lib
@rendermode InteractiveServer

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>
<h2>Select a option below</h2>
@if(hideMainOptions == false)
{
    <div>
        <button @onclick=ShowAddUser class="btn btn-blue">Add User</button>
        <button @onclick=ShowDeleteUser class ="btn btn-blue">Delete User</button>
        <button @onclick=ShowEditUser class ="btn btn-blue">Edit User</button>
        <button @onclick=ShowListUsers class ="btn btn-blue">List Users</button>
    </div>
}




@if(hideAddUser == false)
{
    <form class="submit-box" @onsubmit=SubmitAdd>
        <label for="username">Username</label>
        <input id="username" type="text" @bind="createUserName" required />

        <label for="email">Email</label>
        <input id="email" type="text" @bind="createUserEmail" required />

        <button type="submit">Submit</button>
    </form>
}
@if (hideDeleteUser == false)
{
    <div>
        <button @onclick=Home class="btn btn-blue">Go Back to Home Page</button>
    </div>
    <div>Click the user you desire to delete.</div>
    @foreach (User user in lib.Users)
    {
        <button class="btn btn-danger" style="display:block" @onclick="@(() => DeleteUser(user))">User ID: @user.Id. User Name: @user.Name User Email: @user.Email</button>
    }
}
@if (hideEditUser == false)
{
    if(hideUserToEdit == false)
    {
        <div>Click the user you desire to edit.</div>
        @foreach (User user in lib.Users)
        {
            <button class="btn btn-danger" style="display:block" @onclick="@(() => PickUser(user))">User ID: @user.Id. User Name: @user.Name User Email: @user.Email</button>
        }
    }
    if(showEditProcess == true)
    {
        <form class="submit-box" @onsubmit=SubmitEdit>
            <label for="username">New Username(leave blank to not change it)</label>
            <input id="username" type="text" @bind="newName"/>

            <label for="email">New Email(leave blank to not change it)</label>
            <input id="email" type="text" @bind="newEmail" />

            <button type="submit">Submit</button>
        </form>
    }
}
@if (hideListUsers == false)
{
    @foreach (User user in lib.Users)
    {
        <div style="display:block">User ID: @user.Id. User Name: @user.Name User Email: @user.Email</div>
    }
    <div>
        <button @onclick=HideListUsers class="btn btn-blue">Hide the List of users.</button>
    </div>
}


@if (successMessage == true)
{
    <div>
        Your task was successful.
    </div>
} else
{
    <div>
        <button @onclick=Home class="btn btn-blue">Go Back to Home Page</button>
    </div>
} 



@code {
    bool hideMainOptions = false;
    bool hideAddUser = true;
    bool hideDeleteUser = true;
    bool hideEditUser = true;
    bool hideListUsers = true;

    bool hideUserToEdit = true;
    bool showEditProcess = false;

    bool successMessage = false;

    int userToEditId;
    string newName = "";
    string newEmail = "";

    string createUserName;
    string createUserEmail;



    // navigation
    private void Home()
    {
        Nav.NavigateTo("/");
    }

    // methods use to hide/show elements
    //add user
    private void ShowAddUser()
    {
        hideMainOptions = true;
        hideAddUser = false;

    }
    private void HideShowUser()
    {
        hideMainOptions = false;
        hideAddUser = true;
    }
    //delete user
    private void ShowDeleteUser()
    {
        hideMainOptions = true;
        hideDeleteUser = false;
    }
    private void HideDeleteUser()
    {
        hideMainOptions = false;
        hideDeleteUser = true;
    }
    // edit user 
    private void ShowEditUser()
    {
        hideMainOptions = true;
        hideEditUser = false;
        hideUserToEdit = false;
    }
    private void HideEditUser()
    {
        hideMainOptions = false;
        hideEditUser = true;
        hideUserToEdit = true;

    }

    // list of users
    private void ShowListUsers()
    {
        hideMainOptions = true;
        hideListUsers = false;
    }
    private void HideListUsers()
    {
        hideMainOptions = false;
        hideListUsers = true;
    }
    // actual functions
    private void AddUser(User user)
    {
        lib.AddUser(user.Name, user.Email);
    }
    private void DeleteUser(User user)
    {

        lib.DeleteUser(user.Id);
        HideDeleteUser();
        successMessage = true;
        
        Success();
    }
    private void EditUser(int id, string updatedName, string updatedEmail)
    {
        hideUserToEdit = true;
        hideEditUser = true;
        showEditProcess = false;
        lib.EditUser(id, updatedName, updatedEmail);
    }
    private void SubmitEdit()
    {
        User user = lib.Users.FirstOrDefault(u => u.Id == userToEditId);

        if (newName == "")
        {
            newName = user.Name;
        }
        if (newEmail == "")
        {
            newEmail = user.Email;
        }

        EditUser(user.Id, newName, newEmail);
        HideEditUser();

        successMessage = true;
        
        Success();
    }
    private void PickUser(User user)
    {
        hideUserToEdit = true;
        userToEditId = user.Id;
        showEditProcess = true;
    }

    private void SubmitAdd()
    {
        lib.AddUser(createUserName, createUserEmail);
        HideShowUser();

        successMessage = true;
        
        Success();
    }

    private void Success()
    {
        successMessage = true;
        
        Nav.NavigateTo("/manage-users", forceLoad: true);
    }
}